import os
import numpy as np
from math import sqrt, ceil
import cv2

def process_directory(directory_path, output_folder):
    # Crée un sous-dossier pour les images
    os.makedirs(output_folder, exist_ok=True)

    # Liste tous les fichiers du répertoire
    for filename in os.listdir(directory_path):
        # Vérifie si le fichier est de type exe
        if filename.endswith(".exe"):
            # Extrait le numéro du fichier exe (suppose que le numéro est le premier groupe de chiffres dans le nom de fichier)
            file_number = ''.join(filter(str.isdigit, filename))

            # Chemin complet du fichier
            input_file_path = os.path.join(directory_path, filename)

            # Lire le fichier binaire
            with open(input_file_path, 'rb') as binary_file:
                data = binary_file.read()

            # Data length in bytes
            data_len = len(data)

            # d is a verctor of data_len bytes
            d = np.frombuffer(data, dtype=np.uint8)

            # Assume image shape should be close to square
            sqrt_len = int(ceil(sqrt(data_len)))  # Compute square toot and round up

            # Requiered length in bytes.
            new_len = sqrt_len*sqrt_len

            # Number of bytes to pad (need to add zeros to the end of d)
            pad_len = new_len - data_len

            # Pad d with zeros at the end.
            # padded_d = np.pad(d, (0, pad_len))
            padded_d = np.hstack((d, np.zeros(pad_len, np.uint8)))

            # Reshape 1D array into 2D array with sqrt_len pad_len x sqrt_len (im is going to be a Grayscale image).
            im = np.reshape(padded_d, (sqrt_len, sqrt_len))

            # Enregistre l'image dans le sous-dossier avec le numéro du fichier exe
            output_file_path = os.path.join(output_folder, f"{file_number}.png")
            cv2.imwrite(output_file_path, im)
            print(f"Image enregistrée : {output_file_path}")

# Appel de la fonction pour chaque répertoire
process_directory('C:\\Users\\cocol\\Documents\\HEH 2023\\MachineLearning\\Projet\\heh-cybersecurity-2023-2024\\trainset\\trainset\safe', 'output_images')
process_directory('C:\\Users\\cocol\\Documents\\HEH 2023\\MachineLearning\\Projet\\heh-cybersecurity-2023-2024\\trainset\\trainset\malware', 'output_images')
