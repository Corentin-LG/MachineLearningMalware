import os
import pandas as pd
import subprocess

# Dictionnaire global pour stocker le nombre de détections de chaque type de packer
top_packers = [
    'UPX', 'ASPack', 'PECompact', 'NSPack', 'FSG', 'RLPack',
    'Morphine', 'ExeCryptor', 'Yoda', 'MEW', 'PEtite', 'Telock',
    'MewPack', 'ASProtect', 'Enigma', 'VMProtect', 'Obsidium',
    'Themida', 'Armadillo', 'ACProtect'
]

# Chemin vers le répertoire contenant les fichiers malveillants
# malware_directory = 'C:\\Users\\cocol\\Documents\\HEH2023\\MachineLearning\\Projet\\\OpenFileIntoGrayScale\\safeMid'

# malware_directory = 'C:\\Users\\cocol\\Documents\\HEH2023\\MachineLearning\\Projet\\heh-cybersecurity-2023-2024\\trainset\\trainset\\safe'
# malware_directory = 'C:\\Users\\cocol\\Documents\\HEH2023\\MachineLearning\\Projet\\heh-cybersecurity-2023-2024\\trainset\\trainset\\malware'
malware_directory = 'C:\\Users\\cocol\\Documents\\HEH2023\\MachineLearning\\Projet\\heh-cybersecurity-2023-2024\\testset\\testset'


# Créer une liste pour stocker les résultats
results = []

# Parcourir tous les fichiers du répertoire
for filename in os.listdir(malware_directory):
    if filename.endswith(".exe"):
        file_path = os.path.join(malware_directory, filename)

        # Exécute la commande PEiD en mode avancé pour identifier le packer
        try:
            print(f"Analyse {filename}.exe en cours...")
            # Chemin vers l'exécutable PEiD
            peid_file = 'C:\\Users\\cocol\\.pyenv\\pyenv-win\\shims\\peid.bat'
            
            # Exécute la commande PEiD en mode avancé pour identifier le packer
            result = subprocess.run([peid_file, file_path], capture_output=True, text=True, check=True)

            # Vérifie si l'un des packers est présent dans la sortie
            packer_presence = [1 if packer.upper() in result.stdout.upper() else 0 for packer in top_packers]

            # Ajoute le résultat à la liste
            results.append([filename] + packer_presence)
            
            print(f"Analyse {filename}.exe terminée")

        except subprocess.CalledProcessError as e:
            # En cas d'erreur, affiche le message d'erreur
            print(f"Erreur lors de l'identification du packer : {e.stderr} de chemin {file_path}")

# Créer un DataFrame pandas à partir des résultats
columns = ['Malware'] + top_packers
df = pd.DataFrame(results, columns=columns)

# Enregistrer le DataFrame dans un fichier CSV
csv_path = 'malware_results.csv'
df.to_csv(csv_path, index=False)

print(f"Le fichier CSV '{csv_path}' a été créé avec succès.")
